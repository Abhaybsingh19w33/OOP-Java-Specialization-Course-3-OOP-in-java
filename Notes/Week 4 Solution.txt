Congratulations and Quiz Answers

Quiz Answers and Explanations

Question 1
Does your program correctly respond to mouse clicks and mouse hovers, as described in the project assignment write up? This should include the following behaviors (test them now):

When I city or earthquake is hovered over, information should be displayed about that city or earthquake. Test this by hovering over several cities and earthquakes now.

It should never be the case that information for more than one item is displayed at the same time. Test this last point explicitly by hovering over two nearby cities or earthquakes, and a city next to an earthquake.

If all earthquakes and cities are displayed, when you click on an earthquake, all other earthquakes should be hidden and all cities except those in the threat circle should be hidden. Test this by clicking on an earthquake now.

If earthquakes or cities are hidden, clicking anywhere should re-display all earthquake and city markers. Test this by clicking somewhere now. Try to test clicking on where a hidden earthquake is to make sure it's not selected.

If all earthquakes and cities are displayed, when you click on a city, all other cities should be hidden and all earthquakes except those that affect the city (city is in their threat circle) should be hidden. Test this by clicking on a city that has some nearby earthquakes now.

If you click on no marker and everything is already displayed, nothing should happen. Test this now.

Your response:

Yes (correct). Thanks for being honest and nice work!!!  You've created an interactive program!

No: Thanks for being honest. I'm sure you've already worked hard on getting this part of the assignment done. If you need a bit more help to finish, feel free to post in the discussion forums for help from course Mentors and check out the support videos.


Question 2
Select the classes that are the direct subclasses of (i.e. directly extend) the class CommonMarker in module 5 programming assignment (when the assignment is complete).     Check all that apply.

EarthquakeMarker (correct).  Yes, EarthquakeMarker extends CommonMarker. You can see this in the class declaration header.

CityMarker (correct). Yes, CityMarker extends CommonMarker. You can also see this in the class declaration header.

LandQuakeMarker.   No, LandQuakeMarker extends EarthquakeMarker.

OceanQuakeMarker.  No, OceanQuakeMarker extends EarthquakeMarker.

SimplePointMarker. No, SimplePointMarker is the parent class (super class) of CommonMarker.


Question 3
What caused the bug in the starter code when you modified CityMarker to extend CommonMarker instead of SimplePointMarker?  

CommonMarker cannot be extended because it is an abstract class.  This is incorrect.  In fact, an abstract class must be extended for it to be useful.

CityMarker did not implement the drawMarker method, which is abstract in CommonMarker (correct). This is the correct response. All abstract methods must be implemented by a non-abstract class that extends an abstract class. The solution was to change the draw method in CityMarker to be named drawMarker, which was then called from draw in CommonMarker.

The body of the showTitle method in CityMarker was empty.   showTitle is abstract and must be implemented by CityMarker, but it's OK for the "implementation" to have an empty body. This means the code will not work correctly, but it will compile.

The header in CityMarker needed to say "implements CommonMarker" instead of "extends CommonMarker".  The keyword implements is used for interfaces only (like listener interfaces). CommonMarker is a class (although it is abstract, it is still a class), so it needs to be extended using the keyword "extends".


Question 4
What common functionality does CommonMarker implement for its subclasses? In other words, what functionality is inherited by subclasses (not overrided) and used either by users of subclass objects or by the subclass itself?

The setClicked method that allows the user to set the "clicked" state of the marker (correct).  The setClicked method sets the "clicked" state of the marker. None of the subclasses override this method.

The draw method (correct).  The draw method is implemented in CommonMarker and is not implemented in any of its subclasses. drawMarker is the method that the subclasses implement.

The drawMarker method that draws the details of the marker.  The drawMarker method is abstract in CommonMarker, and is implemented in CommonMarker's subclasses.

The showTitle method that displays the marker's text.  The drawMarker method is abstract in CommonMarker, and is implemented in CommonMarker's subclasses.


Question 5
Where are the variables mouseX and mouseY, which you used in the method selectMarkerIfHover, declared?  

They are member variables of the PApplet class and are inherited by EarthquakeCityMap (correct).  They are PApplet member variables and so they can be used in EarthquakeCityMap because it extends PApplet.

They are member variables explicitly declared in EarthquakeCityMap. If you look at the variable declarations in the class EarthquakeCityMap, you will not see these variables.

They are local variables declared in selectMarkerIfHover.  They cannot be local variables because if they were they would not be able to get the value of the x and y position of the mouse. These values are set outside of selectMarkerIfHover.

They are parameters passed to selectMarkerIfHover.  Notice that selectMarkerIfHover does not take any parameters.


Question 6
In which class(es) is the code that actually draws the text label (i.e. the call to the PGraphics text(...) method) next to the city markers and earthquake markers located?  Select ALL that apply.

EarthquakeCityMap. This class has the methods mouseClicked and selectMarkerIfHover, but these methods do not actually draw the text next to the marker directly.

CommonMarker.  This class implements the draw method, but this method should not actually draw the text next to the marker directly.

CityMarker (correct).  This class is one of the classes that draws the text next to the marker in its drawMarker method.

EarthquakeMarker (correct).   This class is one of the classes that draws the text next to the marker in its drawMarker method.

LandQuakeMarker.  This class does not draw the text next to the marker. That should be done in its superclass (EarthquakeMarker) because the text for all earthquakes is the same.

OceanQuakeMarker.   This class does not draw the text next to the marker. That should be done in its superclass (EarthquakeMarker) because the text for all earthquakes is the same.

Question 7
Consider the following code, which might be used as a helper method in the mouseClicked method for this programming assignment. This method is supposed to do the following:

If lastClicked is not null, it should abort the method.

Otherwise it should check all of the cities for a click.

If it finds a city that has been clicked and that city is not hidden and that city is the first one it finds to be clicked, it sets lastClicked to be that city's marker

It then sets the rest of the cities to be hidden.

If there is no city clicked, it does nothing to the city markers.

private void checkCitiesForClick()
{
    if (lastClicked != null) 
        return;
    for (Marker marker : cityMarkers) 
    {
        if (!marker.isHidden() &&
            marker.isInside(map, mouseX, mouseY) &&
            lastClicked == null)
        {

Does this code have a bug, and if so, what is it?

There is no bug. The code works correctly as described.  Check the code to see what happens when no city is clicker.  Should it be calling setHidden for all cities?

If no city is clicked, this code will hide all the cities (instead of leaving them alone like it is supposed to) - (correct).  If no city is clicked, the "else" statement in the "for" loop will execute for every city, in effect hiding all of the cities. 

This code can potentially select more than one city, and making it so that more than one city remains unhidden.  The condition lastClicked == null in the if statement will keep this from happening.

This code can potentially select a hidden city. The condition !marker.isHidden() in the if statement will keep this from happening.

It will run the loop to check the cities for a click even if lastClicked is not equal to null.  The first if statement with the return immediately aborts the method if lastClicked is not null, and so the loop will not run.
