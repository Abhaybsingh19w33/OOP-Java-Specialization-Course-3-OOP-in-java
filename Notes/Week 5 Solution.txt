Congratulations and quiz answers
Sorting: assignment and quiz answers
Quiz Answers and Explanations
Correct answers are in bold. Incorrect answers are shown in italics.

Question 1
Which of the following is a requirement for using the binary search algorithm to find an item in an array?  

The array must be in sorted order (correct).  Binary search rules out half of the remaining portion of the list each time, but it can only do this on a sorted list.

The array must contain either ints or Strings. Binary search will work for any kind of data that is comparable.

The array must have more than 2 elements in it.  This is not a requirement for binary search.  Binary search will work on an array of one (or two) elements, so long as the list is sorted.

None of the above is a requirement of binary search.  One of the options above describes a condition that must be true for binary search to work correctly.


Question 2
The following code implements binary search. Choose the option that correctly fills in the missing line of code:  

/* Return true if toFind is found in toSearch, 
 * otherwise return false.  Uses binary search. */
public static boolean binarySeach(int[] toSearch, int toFind)
{
    int low = 0;
    int high = toSearch.length - 1;
    int mid;
    while ( << INSERT ANSWER CODE HERE >> )
    {   
        mid = low + ((high-low)/2);
        if (toFind < toSearch[mid]) {
            high = mid-1;
        }
        else if (toFind > toSearch[mid]) {
            low = mid+1;
        }
        else return true;
    }
    return false;
}

Correct
high >= low
High must be greater than or equal to low. If it falls below low, then we conclude toFind is not there.  

Incorrect
low < high
  This is almost right, but the loop should continue to execute even when high and low are equal.

Incorrect
mid >= low
The focus for the condition should be based on low and high, not low and mid.  In fact, when toFind is in the lower part of the array, low will be less than mid at the start of the loop because it is set to mid-1.  

Incorrect
found == false
  There is no variable named found in this context. This condition must use the variables that are defined.

  

Question 3
Consider the following ordering of integers in an array:

8 , 12 , 45 , 58 , 22 , 18 , 43 , 30

Which of the following sorting algorithms could have produced this array above after 3 iterations of its outer loop?

Insertion Sort (correct).   Insertion sort could have produced this ordering because the first four elements in the list are in sorted order. At the end of the i'th iteration of the outer loop, insertion sort ensures that the first i+1 elements are in sorted order relative to each other.

Selection Sort.  This ordering cannot be produced by selection sort. At the end of the i'th iteration through its outer loop, selection sort ensures that the smallest i elements are in the first i positions in the array, which are their final positions in the array. This is not the case here because 18 is not in its correct position.

Both Insertion and Selection Sort.  This ordering cannot be produced by selection sort. At the end of the i'th iteration through its outer loop, selection sort ensures that the smallest i elements are in the first i positions in the array, which are their final positions in the array. This is not the case here because 18 is not in its correct position.

Neither Insertion nor Selection Sort.  Insertion sort could have produced this ordering because the first four elements in the list are in sorted order. At the end of the i'th iteration of the outer loop, insertion sort ensures that the first i+1 elements are in sorted order relative to each other.


Question 4
True or false: Selection sort is faster when the elements in the array are already sorted than when they are unsorted.

True.  Please see the rationale for "False" below.

False (correct).   This is false because the two nested loops in selection sort always execute to completion, no matter what the order of the underlying elements. Because the inner loop in selection sort must find the smallest remaining element, it must search all the way through the remaining elements to be sure its found the smallest.


Question 5
True or false: Insertion sort as we examined in (i.e. mystery sort) is faster when the elements in the array are already sorted than when they are unsorted.  

True (correct).  This is true because the inner loop in insertion sort aborts as soon as it discovers that the element it is moving is already in the correct relative position. If the array is already sorted, then the inner loop will always abort after just one check.

False.  Please see the rationale above.


Question 6
Which of the following correctly implements the compareTo method in EarthquakeMarker so that earthquakes are sorted from highest magnitude to lowest magnitude?  

You don't need to implement compareTo in EarthquakeMarker. This is the default sorting behavior for EarthquakeMarkers.  Java does not know how to sort EarthquakeMarker objects by default. You must tell it how to compare them by implementing the Comparable<EarthquakeMarker> interface, which involves implementing the compareTo method.

Incorrect
public boolean compareTo(EarthquakeMarker m)
{
    if (this.getMagnitude() > m.getMagnitude()) 
        return true;
    else
        return false;
}
compareTo must return an int type, not a boolean.  

Incorrect
public int compareTo(EarthquakeMarker m1, EarthquakeMarker m2)
{
    if (m1.getMagnitude() > m2.getMagnitude()) 
        return 1;
    else if (m1.getMagnitude < m2.getMagnitude())
        return -1;
    else:
        return 0;
}
compareTo takes only one parameter, and must compare the parameter object to the calling object.

Correct.
public int compareTo(EarthquakeMarker m)
{
    if (m.getMagnitude() < this.getMagnitude())
        return -1;
    else if (this.getMagnitude() < m.getMagnitude())
        return 1;
    else
        return 0;
}
This code correctly implements the compareTo method. It will return 1 if the magnitude of calling object's earthquake is less than the argument object's magnitude, and -1 when the calling object's magnitude is greater. This will lead to smaller magnitudes being later in the list, because the calling object is considered "less than" the argument (i.e. return value of -1) when its magnitude is greater.  

Incorrect
public int compareTo(EarthquakeMarker m)
{
    if (this.getMagnitude() < m.getMagnitude()) 
        return -1;
    else if (this.getMagnitude() > m.getMagnitude())
        return 1;
    else
        return 0;
}
This version of compareTo will sort EarthquakeMarkers from smallest magnitude to largest.


Question 7 
Run your program with the earthquake input file "quiz2.atom". There is a commented out line of code in the setUp method in EarthquakeCityMap that you can uncomment to make this happen:

earthquakesURL = "quiz2.atom";
Call sortAndPrint as appropriate to answer the following question.

What is the magnitude of the 6th earthquake printed (i.e. the 6th strongest earthquake)? To be clear, if there are two earthquakes of the same magnitude, each magnitude will count. For example, if the top 4 magnitudes are {7, 6.9, 6.9, and 6}, the 4th largest is 6.

6.4 (correct).  This is the magnitude of the earthquake 180km SE of Gizo, Solomon Islands, which is the 6th in the list.  If you found a different value, you can directly inspect the "quiz2.atom" file to help debug your code.


Question 8
Run your program with the earthquake input file "quiz2.atom". There is a commented out line of code in the setUp method in EarthquakeCityMap that you can uncomment to make this happen:  

earthquakesURL = "quiz2.atom";
Call sortAndPrint as appropriate to answer the following question.

What is the strongest magnitude that is repeated three or more times in the data set?

5.9 (correct). There are 4 earthquakes in this data set with a magnitude of 5.9.